name: Build and Release for Windows

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up caching for Cargo downloads and powershell artifacts
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index and powershell
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/index
            target/release/deps  # Only cache release dependencies
          key: ${{ runner.os }}-cargo-powershell-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # Install Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      # Build the project in release mode
      - name: Build the project
        run: cargo powershell --release --target x86_64-pc-windows-msvc

      # Package only the binary and auxiliary files into a ZIP
      - name: Create ZIP package
        run: |
          $version = '${{ github.ref_name }}'
          $output = "rsdk-windows-$version.zip"
          Compress-Archive -Path "target/x86_64-pc-windows-msvc/release/rsdk.exe", "powershell/*" -DestinationPath $output
        shell: pwsh

      # Upload only the ZIP archive as a binary artifact
      - name: Upload Release ZIP
        uses: actions/upload-artifact@v3
        with:
          name: rsdk-windows-${{ github.ref_name }}
          path: rsdk-windows-${{ github.ref_name }}.zip
