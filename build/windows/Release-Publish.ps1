param (
    [Parameter(Mandatory = $true)]
    [string]$Version,                  # Version to publish, e.g., "1.1.0"
    [Parameter(Mandatory = $true)]
    [string]$GitHubToken               # GitHub token for authentication
)

# Define file paths
$ScoopTemplatePath = "./templates/scoop/rsdk.json"
$ScoopManifestPath = "./rsdk.json"
$GitHubRepo = "fralalonde/rsdk"
$artifactName = "rsdk-windows-$Version.zip"

# GitHub API URL to retrieve artifact URL from the latest release
$GitHubApiUrl = "https://api.github.com/repos/$GitHubRepo/releases/tags/v$Version"

# Configure GitHub CLI authentication
$env:GITHUB_TOKEN = $GitHubToken

# Step 1: Retrieve the URL for the ZIP artifact generated by GitHub Actions
Write-Host "Fetching release artifact information for v$Version..."
$response = Invoke-RestMethod -Uri $GitHubApiUrl -Headers @{ "Authorization" = "token $GitHubToken"; "User-Agent" = "PowerShell" }

$zipAsset = $response.assets | Where-Object { $_.name -eq $artifactName -and $_.content_type -eq "application/zip" }
if (-not $zipAsset) {
    Write-Error "Could not find the ZIP artifact for version $Version. Ensure GitHub Actions built the artifact."
    exit 1
}

# Download the ZIP artifact to calculate its SHA-256
$zipDownloadUrl = $zipAsset.browser_download_url
$zipFilePath = Join-Path -Path $env:TEMP -ChildPath $artifactName

Write-Host "Downloading ZIP artifact to calculate SHA-256..."
Invoke-WebRequest -Uri $zipDownloadUrl -OutFile $zipFilePath

$sha256 = Get-FileHash -Path $zipFilePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash
Write-Host "SHA-256 checksum: $sha256"

# Step 2: Update Scoop manifest with new version and SHA
Write-Host "Updating Scoop manifest from template with new version and SHA..."
$scoopContent = Get-Content -Path $ScoopTemplatePath -Raw
$updatedScoopContent = $scoopContent -replace 'PUT_YOUR_ZIP_URL_HERE', $zipDownloadUrl -replace 'PUT_YOUR_BINARY_HASH_HERE', $sha256 -replace 'PUT_YOUR_VERSION_HERE', $Version
Set-Content -Path $ScoopManifestPath -Value $updatedScoopContent

# Step 3: Commit and push changes, then create GitHub release
Write-Host "Committing changes and creating GitHub release..."
git add $ScoopManifestPath
git commit -m "Publish release $Version with updated Scoop manifest"
git push origin main

Write-Host "Creating GitHub release..."
$releaseTitle = "Release $Version"
$releaseNotes = "Auto-published release for version $Version with updated Scoop manifest."

gh release create "v$Version" $zipFilePath -t "$releaseTitle" -n "$releaseNotes" --repo $GitHubRepo --latest

Write-Host "Release published successfully!"
